/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import type { BamlRuntime, BamlCtxManager, ClientRegistry, Image, Audio } from "@boundaryml/baml"
import { toBamlError, HTTPRequest } from "@boundaryml/baml"
import type { Checked, Check } from "./types.js"
import type * as types from "./types.js"
import type {ArticleCheckResult, ArticleGenerationResult, ArticleGenerationTool, ArticleMemorySaveEvent, ArticleOptimizeResult, EventMessage, MemoryRetrivalTool, MemoryStateToolData, RequestHumanForConfirmation, RequestHumanForSatisfaction, Resume, RuleSet, StopEvent} from "./types.js"
import type TypeBuilder from "./type_builder.js"

type BamlCallOptions = {
  tb?: TypeBuilder
  clientRegistry?: ClientRegistry
  env?: Record<string, string | undefined>
}

export class AsyncHttpRequest {
  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

  
  async ArticleOptimize(
      markdownOriginalString: string,articleGenerationContent: string,articleTitle: string,articleType: string,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "ArticleOptimize",
        {
          "markdownOriginalString": markdownOriginalString,"articleGenerationContent": articleGenerationContent,"articleTitle": articleTitle,"articleType": articleType
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async ChatAgent(
      eventMessage: EventMessage[],
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "ChatAgent",
        {
          "eventMessage": eventMessage
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async CheckContent(
      generationArticleContent: string,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "CheckContent",
        {
          "generationArticleContent": generationArticleContent
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async ExtractResume(
      resume: string,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "ExtractResume",
        {
          "resume": resume
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateArticle(
      markdownOriginalString: string,dateString: string,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GenerateArticle",
        {
          "markdownOriginalString": markdownOriginalString,"dateString": dateString
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateArticleWithRuleSets(
      markdownOriginalString: string,dateString: string,rulesets: RuleSet[],
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GenerateArticleWithRuleSets",
        {
          "markdownOriginalString": markdownOriginalString,"dateString": dateString,"rulesets": rulesets
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async PromptTokenTest(
      input: string,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "PromptTokenTest",
        {
          "input": input
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async Style2ArticleGeneration(
      markdownOriginalString: string,dateString: string,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "Style2ArticleGeneration",
        {
          "markdownOriginalString": markdownOriginalString,"dateString": dateString
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}

export class AsyncHttpStreamRequest {
  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

  
  async ArticleOptimize(
      markdownOriginalString: string,articleGenerationContent: string,articleTitle: string,articleType: string,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "ArticleOptimize",
        {
          "markdownOriginalString": markdownOriginalString,"articleGenerationContent": articleGenerationContent,"articleTitle": articleTitle,"articleType": articleType
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async ChatAgent(
      eventMessage: EventMessage[],
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "ChatAgent",
        {
          "eventMessage": eventMessage
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async CheckContent(
      generationArticleContent: string,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "CheckContent",
        {
          "generationArticleContent": generationArticleContent
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async ExtractResume(
      resume: string,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "ExtractResume",
        {
          "resume": resume
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateArticle(
      markdownOriginalString: string,dateString: string,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GenerateArticle",
        {
          "markdownOriginalString": markdownOriginalString,"dateString": dateString
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateArticleWithRuleSets(
      markdownOriginalString: string,dateString: string,rulesets: RuleSet[],
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GenerateArticleWithRuleSets",
        {
          "markdownOriginalString": markdownOriginalString,"dateString": dateString,"rulesets": rulesets
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async PromptTokenTest(
      input: string,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "PromptTokenTest",
        {
          "input": input
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async Style2ArticleGeneration(
      markdownOriginalString: string,dateString: string,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "Style2ArticleGeneration",
        {
          "markdownOriginalString": markdownOriginalString,"dateString": dateString
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}