/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import { FieldType } from '@boundaryml/baml/native'
import { TypeBuilder as _TypeBuilder, EnumBuilder, EnumViewer, ClassBuilder, ClassViewer } from '@boundaryml/baml/type_builder'
import { DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME } from "./globals.js"

export default class TypeBuilder {
    private tb: _TypeBuilder;
    
    ArticleCheckResult: ClassViewer<'ArticleCheckResult', "title" | "markdownContent">;
    
    ArticleGenerationResult: ClassViewer<'ArticleGenerationResult', "title" | "markdownContent" | "articleType">;
    
    ArticleGenerationTool: ClassViewer<'ArticleGenerationTool', "event" | "data">;
    
    ArticleMemorySaveEvent: ClassViewer<'ArticleMemorySaveEvent', "event" | "data">;
    
    ArticleOptimizeResult: ClassViewer<'ArticleOptimizeResult', "title" | "markdownContent" | "articleType">;
    
    EventMessage: ClassViewer<'EventMessage', "eventName" | "dataContent">;
    
    MemoryRetrivalTool: ClassViewer<'MemoryRetrivalTool', "event">;
    
    MemoryStateToolData: ClassViewer<'MemoryStateToolData', "toolName" | "dataContent">;
    
    RequestHumanForConfirmation: ClassViewer<'RequestHumanForConfirmation', "event" | "data">;
    
    RequestHumanForSatisfaction: ClassViewer<'RequestHumanForSatisfaction', "event" | "data">;
    
    Resume: ClassViewer<'Resume', "name" | "email" | "experience" | "skills">;
    
    RuleSet: ClassViewer<'RuleSet', "content">;
    
    StopEvent: ClassViewer<'StopEvent', "event" | "data">;
    
    

    constructor() {
        this.tb = new _TypeBuilder({
          classes: new Set([
            "ArticleCheckResult","ArticleGenerationResult","ArticleGenerationTool","ArticleMemorySaveEvent","ArticleOptimizeResult","EventMessage","MemoryRetrivalTool","MemoryStateToolData","RequestHumanForConfirmation","RequestHumanForSatisfaction","Resume","RuleSet","StopEvent",
          ]),
          enums: new Set([
            
          ]),
          runtime: DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME
        });
        
        this.ArticleCheckResult = this.tb.classViewer("ArticleCheckResult", [
          "title","markdownContent",
        ]);
        
        this.ArticleGenerationResult = this.tb.classViewer("ArticleGenerationResult", [
          "title","markdownContent","articleType",
        ]);
        
        this.ArticleGenerationTool = this.tb.classViewer("ArticleGenerationTool", [
          "event","data",
        ]);
        
        this.ArticleMemorySaveEvent = this.tb.classViewer("ArticleMemorySaveEvent", [
          "event","data",
        ]);
        
        this.ArticleOptimizeResult = this.tb.classViewer("ArticleOptimizeResult", [
          "title","markdownContent","articleType",
        ]);
        
        this.EventMessage = this.tb.classViewer("EventMessage", [
          "eventName","dataContent",
        ]);
        
        this.MemoryRetrivalTool = this.tb.classViewer("MemoryRetrivalTool", [
          "event",
        ]);
        
        this.MemoryStateToolData = this.tb.classViewer("MemoryStateToolData", [
          "toolName","dataContent",
        ]);
        
        this.RequestHumanForConfirmation = this.tb.classViewer("RequestHumanForConfirmation", [
          "event","data",
        ]);
        
        this.RequestHumanForSatisfaction = this.tb.classViewer("RequestHumanForSatisfaction", [
          "event","data",
        ]);
        
        this.Resume = this.tb.classViewer("Resume", [
          "name","email","experience","skills",
        ]);
        
        this.RuleSet = this.tb.classViewer("RuleSet", [
          "content",
        ]);
        
        this.StopEvent = this.tb.classViewer("StopEvent", [
          "event","data",
        ]);
        
        
    }

    __tb() {
      return this.tb._tb();
    }

    string(): FieldType {
        return this.tb.string()
    }

    literalString(value: string): FieldType {
        return this.tb.literalString(value)
    }

    literalInt(value: number): FieldType {
        return this.tb.literalInt(value)
    }

    literalBool(value: boolean): FieldType {
        return this.tb.literalBool(value)
    }

    int(): FieldType {
        return this.tb.int()
    }

    float(): FieldType {
        return this.tb.float()
    }

    bool(): FieldType {
        return this.tb.bool()
    }

    list(type: FieldType): FieldType {
        return this.tb.list(type)
    }

    null(): FieldType {
        return this.tb.null()
    }

    map(key: FieldType, value: FieldType): FieldType {
        return this.tb.map(key, value)
    }

    union(types: FieldType[]): FieldType {
        return this.tb.union(types)
    }

    addClass<Name extends string>(name: Name): ClassBuilder<Name> {
        return this.tb.addClass(name);
    }

    addEnum<Name extends string>(name: Name): EnumBuilder<Name> {
        return this.tb.addEnum(name);
    }

    addBaml(baml: string): void {
        this.tb.addBaml(baml);
    }
}